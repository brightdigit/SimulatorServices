name: SimulatorServices
on:
  push:
    branches-ignore:
      - '*WIP'

jobs:
  build-ubuntu:
    name: Build on Ubuntu
    runs-on: ubuntu-latest
    container: swift:${{ matrix.swift-version }}-${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    strategy:
      matrix:
        os: ["noble", "jammy", "focal"]
        swift-version: ["6.0", "5.10", "5.9"]
        exclude:
          - os: "noble"
            swift-version: "5.9"
    steps:
      - uses: actions/checkout@v4
      - name: Cache swift package modules
        id: cache-spm-linux
        uses: actions/cache@v4
        env:
          cache-name: SPM
        with:
          path: .build
          key: ${{ env.cache-name }}-${{ matrix.os }}-${{ matrix.swift-version }}-${{ hashFiles('Package.resolved') }}
          restore-keys: |
            ${{ env.cache-name }}-${{ matrix.os }}-${{ matrix.swift-version }}
      - name: Build
        run: swift build
      - name: Run tests
        run: swift test --enable-test-discovery --enable-code-coverage
      - name: Prepare Code Coverage
        run: llvm-cov export -format="lcov" .build/x86_64-unknown-linux-gnu/debug/${{ github.workflow }}PackageTests.xctest -instr-profile .build/debug/codecov/default.profdata > info.lcov
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: spm,${{ matrix.os }},${{ matrix.swift-version }}
  build-macos:
    name: Build on macOS
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    strategy:
      fail-fast: false
      matrix:
        include:
          # SPM Build Matrix
          - os: macos-14
            xcode: "/Applications/Xcode_15.0.1.app"
          - os: macos-14
            xcode: "/Applications/Xcode_15.1.app"
          - os: macos-14
            xcode: "/Applications/Xcode_15.2.app"
          - os: macos-15
            xcode: "/Applications/Xcode_16.1.app"
          - os: macos-15
            xcode: "/Applications/Xcode_16.2.app"
          
          # iOS Build Matrix
          - type: ios
            os: macos-14
            xcode: "/Applications/Xcode_15.0.1.app"
            deviceName: "iPhone 15"
            osVersion: "17.0.1"
          - type: ios
            os: macos-14
            xcode: "/Applications/Xcode_15.1.app"
            deviceName: "iPhone 15 Pro"
            osVersion: "17.2"
          - type: ios
            os: macos-14
            xcode: "/Applications/Xcode_15.2.app"
            deviceName: "iPhone 15 Pro Max"
            osVersion: "17.2"
          - type: ios
            os: macos-15
            xcode: "/Applications/Xcode_16.1.app"
            deviceName: "iPhone 16"
            osVersion: "18.1"
          - type: ios
            os: macos-15
            xcode: "/Applications/Xcode_16.2.app"
            deviceName: "iPhone 16 Pro"
            osVersion: "18.2"
  
          # watchOS Build Matrix
          - type: watchos
            os: macos-14
            xcode: "/Applications/Xcode_15.0.1.app"
            deviceName: "Apple Watch Series 9 (41mm)"
            osVersion: "10.0"
          - type: watchos
            os: macos-14
            xcode: "/Applications/Xcode_15.1.app"
            deviceName: "Apple Watch Series 9 (45mm)"
            osVersion: "10.2"
          - type: watchos
            os: macos-14
            xcode: "/Applications/Xcode_15.2.app"
            deviceName: "Apple Watch Ultra 2 (49mm)"
            osVersion: "10.2"
          - type: watchos
            os: macos-15
            xcode: "/Applications/Xcode_16.1.app"
            deviceName: "Apple Watch Ultra 2 (49mm)"
            osVersion: "11.1"
          - type: watchos
            os: macos-15
            xcode: "/Applications/Xcode_16.2.app"
            deviceName: "Apple Watch Ultra 2 (49mm)"
            osVersion: "11.2"
    
          # visionOS Build Matrix
          - type: visionos
            os: macos-15
            xcode: "/Applications/Xcode_16.2.app"
            deviceName: "Apple Vision Pro"
            osVersion: "2.1"
    
          # tvOS Build Matrix
          - type: tvos
            os: macos-15
            xcode: "/Applications/Xcode_16.2.app"
            deviceName: "Apple TV 4K (3rd generation)"
            osVersion: "18.2"
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set Xcode Name
        run: echo "XCODE_NAME=$(basename -- ${{ matrix.xcode }} | sed 's/\.[^.]*$//' | cut -d'_' -f2)" >> $GITHUB_ENV
      
      - name: Setup Xcode
        run: sudo xcode-select -s ${{ matrix.xcode }}/Contents/Developer
    
      - name: Set SDK and Platform
        if: matrix.type
        run: |
          case ${{ matrix.type }} in
            ios)
              echo "PLATFORM=iOS Simulator" >> $GITHUB_ENV
              echo "SDK=iphonesimulator" >> $GITHUB_ENV
              ;;
            watchos)
              echo "PLATFORM=watchOS Simulator" >> $GITHUB_ENV
              echo "SDK=watchsimulator" >> $GITHUB_ENV
              ;;
            visionos)
              echo "PLATFORM=visionOS Simulator" >> $GITHUB_ENV
              echo "SDK=xrsimulator" >> $GITHUB_ENV
              ;;
            tvos)
              echo "PLATFORM=tvOS Simulator" >> $GITHUB_ENV
              echo "SDK=appletvsimulator" >> $GITHUB_ENV
              ;;
            esac
      - uses: irgaly/xcode-cache@v1
        if: matrix.type
        with:
          key: xcode-${{ runner.os }}-${{ matrix.os }}-${{ env.XCODE_NAME }}-${{ hashFiles('Package.resolved') }}-${{ github.sha }}
          restore-keys: |
            xcode-${{ runner.os }}-${{ matrix.os }}-${{ env.XCODE_NAME }}-${{ hashFiles('Package.resolved') }}-                        
            xcode-${{ runner.os }}-${{ matrix.os }}-${{ env.XCODE_NAME }}-          
      - name: Cache swift package modules
        id: cache-spm-macos
        if: "!matrix.type"
        uses: actions/cache@v4
        env:
          cache-name: cache-spm
        with:
          path: .build
          key: spm-${{ runner.os }}-${{ matrix.os }}-${{ env.XCODE_NAME }}-${{ hashFiles('Package.resolved') }}
          restore-keys: |
            spm-${{ runner.os }}-${{ matrix.os }}-${{ env.XCODE_NAME }}-
  
      - name: Build SPM
        if: "!matrix.type"
        run: swift build
  
      - name: Run Swift Package tests
        if: "!matrix.type"
        run: swift test -v --enable-code-coverage
  
      # Common iOS/watchOS Test Steps
      - name: Run Device Tests
        if: matrix.type
        run: >
          xcodebuild test
          -scheme ${{ github.workflow }}
          -sdk ${{ env.SDK }}
          -destination 'platform=${{ env.PLATFORM }},name=${{ matrix.deviceName }},OS=${{ matrix.osVersion }}'
          -enableCodeCoverage YES
  
      # Common Coverage Steps
      - name: Process Coverage
        uses: sersoft-gmbh/swift-coverage-action@v4
        with:
          fail-on-empty-output: true
  
      - name: Upload Coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: ${{ matrix.type && format('{0}{1}', matrix.type, matrix.osVersion) || 'spm' }}
  lint:
    name: Linting
    if: "!contains(github.event.head_commit.message, 'ci skip')"  
    runs-on: ubuntu-latest
    needs: [build-ubuntu, build-macos]
    env:
      MINT_PATH: .mint/lib
      MINT_LINK_PATH: .mint/bin
    steps:
      - uses: actions/checkout@v4    
      - name: Cache mint
        id: cache-mint
        uses: actions/cache@v4  
        env:
          cache-name: cache
        with:
          path: |
            .mint
            Mint         
          key: ${{ runner.os }}-mint-${{ hashFiles('**/Mintfile') }}
          restore-keys: |
            ${{ runner.os }}-mint-  
      - name: Install mint
        if: steps.cache-mint.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/yonaskolb/Mint.git
          cd Mint
          swift run mint install yonaskolb/mint
      - name: Lint
        run: ./Scripts/lint.sh
